{"version":3,"sources":["components/MapDisplay.js","App.js","serviceWorker.js","index.js"],"names":["CLIENT_ID","CLIENT_SECRET","FS_V","MapDisplay","state","map","markers","markerProps","activeMarker","activeMarkerProps","showingInfoWindow","mapReady","props","_this","setState","updateMarkers","locations","getBusinessInfo","data","response","venues","filter","item","name","includes","onMarkerClick","marker","e","onMarkerClose","url","concat","position","lat","lng","headers","Headers","request","Request","method","fetch","then","json","result","restaurant","Object","objectSpread","foursquare","id","images","photo","forEach","setMap","location","index","tempProps","key","pos","push","animation","google","maps","Animation","DROP","Marker","addListener","center","this","actProps","react_default","a","createElement","dist","role","aria-label","onReady","zoom","styles","initialCenter","onClick","visible","onClose","href","target","rel","alt","src","items","prefix","suffix","Component","GoogleApiWrapper","apiKey","App","all","render","className","components_MapDisplay","Boolean","window","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0jEAIMA,EAAY,mDACZC,EAAgB,mDAChBC,EAAO,SAEPC,6MACJC,MAAQ,CACNC,IAAK,KACLC,QAAS,GACTC,YAAa,GACbC,aAAc,KACdC,kBAAmB,KACnBC,mBAAmB,KAGrBC,SAAW,SAACC,EAAOP,GAEjBQ,EAAKC,SAAS,CAAET,QAChBQ,EAAKE,cAAcF,EAAKD,MAAMI,cAGhCC,gBAAkB,SAACL,EAAOM,GAExB,OAAOA,EAAKC,SAASC,OAAOC,OAC1B,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,SAASZ,EAAMW,OAASX,EAAMW,KAAKC,SAASF,EAAKC,WAIvEE,cAAgB,SAACb,EAAOc,EAAQC,GAC9Bd,EAAKe,gBAGL,IAUInB,EAVAoB,EAAG,yDAAAC,OAA4D9B,EAA5D,mBAAA8B,OAAuF7B,EAAvF,OAAA6B,OAA0G5B,EAA1G,mBAAA4B,OACLlB,EAAMmB,SAASC,IADV,KAAAF,OAEHlB,EAAMmB,SAASE,KACfC,EAAU,IAAIC,QACdC,EAAU,IAAIC,QAAQR,EAAK,CAC7BS,OAAQ,MACRJ,YAKFK,MAAMH,GACHI,KAAK,SAAArB,GAAQ,OAAIA,EAASsB,SAC1BD,KAAK,SAAAE,GAEJ,IAAIC,EAAa9B,EAAKI,gBAAgBL,EAAO8B,GAO7C,IANAjC,EAAiBmC,OAAAC,EAAA,EAAAD,CAAA,GACZhC,EADY,CAEfkC,WAAYH,EAAW,MAIHG,WAAY,CAChC,IAAIjB,EAAG,wCAAAC,OACLa,EAAW,GAAGI,GADT,sBAAAjB,OAEc9B,EAFd,mBAAA8B,OAEyC7B,EAFzC,OAAA6B,OAE4D5B,GAEnEqC,MAAMV,GACHW,KAAK,SAAArB,GAAQ,OAAIA,EAASsB,SAC1BD,KAAK,SAAAE,GACJjC,EAAiBmC,OAAAC,EAAA,EAAAD,CAAA,GACZnC,EADY,CAEfuC,OAAQN,EAAOvB,SAAS8B,QAEtBpC,EAAKT,MAAMI,cACbK,EAAKC,SAAS,CACZJ,mBAAmB,EACnBF,aAAckB,EACdjB,6BAKRI,EAAKC,SAAS,CACZJ,mBAAmB,EACnBF,aAAckB,EACdjB,wBAORI,EAAKC,SAAS,CACZL,kBAAmBG,EACnBJ,aAAckB,EACdhB,mBAAmB,OAIvBkB,cAAgB,WACVf,EAAKT,MAAMM,mBACbG,EAAKC,SAAS,CACZJ,mBAAmB,EACnBF,aAAc,KACdC,kBAAmB,UAKzBM,cAAgB,SAAAC,GACd,GAAKA,EAAL,CAIAH,EAAKT,MAAME,QAAQ4C,QAAQ,SAAAxB,GAAM,OAAIA,EAAOyB,OAAO,QAGnD,IAAI5C,EAAc,GACdD,EAAUU,EAAUX,IAAI,SAAC+C,EAAUC,GACrC,IAAIC,EAAY,CACdC,IAAKF,EACLA,QACA9B,KAAM6B,EAAS7B,KACfQ,SAAUqB,EAASI,IACnB3B,IAAKuB,EAASvB,KAGhBtB,EAAYkD,KAAKH,GAEjB,IAAII,EAAY7C,EAAKD,MAAM+C,OAAOC,KAAKC,UAAUC,KAC7CpC,EAAS,IAAIb,EAAKD,MAAM+C,OAAOC,KAAKG,OAAO,CAC7ChC,SAAUqB,EAASI,IACnBnD,IAAKQ,EAAKT,MAAMC,IAChBqD,cAMF,OAJAhC,EAAOsC,YAAY,QAAS,WAC1BnD,EAAKY,cAAc6B,EAAW5B,EAAQ,QAGjCA,IAGTb,EAAKC,SAAS,CAAER,UAASC,0FAIzB,IACM0D,EAAS,CACbjC,IAAKkC,KAAKtD,MAAMoB,IAChBC,IAAKiC,KAAKtD,MAAMqB,KAGdkC,EAAWD,KAAK9D,MAAMK,kBAE1B,OACE2D,EAAAC,EAAAC,cAACC,EAAA,IAAD,CACEC,KAAK,cACLC,aAAW,MACXC,QAASR,KAAKvD,SACdgD,OAAQO,KAAKtD,MAAM+C,OACnBgB,KAAMT,KAAKtD,MAAM+D,KACjBC,OAfc,CAAC,cAAe,gBAgB9BC,cAAeZ,EACfa,QAASZ,KAAKtC,eAEdwC,EAAAC,EAAAC,cAACC,EAAA,WAAD,CACE7C,OAAQwC,KAAK9D,MAAMI,aACnBuE,QAASb,KAAK9D,MAAMM,kBACpBsE,QAASd,KAAKtC,eAEdwC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKH,GAAYA,EAAS5C,MACzB4C,GAAYA,EAAStC,IACpBuC,EAAAC,EAAAC,cAAA,KAAGW,KAAMd,EAAStC,IAAKqD,OAAO,SAASC,IAAI,uBAA3C,YAIA,GAEDhB,GAAYA,EAASnB,OACpBoB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OACEc,IAAKjB,EAAS5C,KAAO,gBACrB8D,IACElB,EAASnB,OAAOsC,MAAM,GAAGC,OACzB,UACApB,EAASnB,OAAOsC,MAAM,GAAGE,SAG7BpB,EAAAC,EAAAC,cAAA,mCAGF,aApLWmB,aA6LVC,6BAAiB,CAC9BC,OAnMgB,2CAkMHD,CAEZvF,WCzKYyF,oNAxBbxF,MAAQ,CACN4B,IAAK,WACLC,KAAM,WACN0C,KAAM,GACNkB,IAAK7E,KAGP8E,OAAS,WACP,OACE1B,EAAAC,EAAAC,cAAA,OAAKyB,UAAU,OACb3B,EAAAC,EAAAC,cAAA,OAAKyB,UAAU,UACb3B,EAAAC,EAAAC,cAAA,sDAEFF,EAAAC,EAAAC,cAAC0B,EAAD,CACEhE,IAAKnB,EAAKT,MAAM4B,IAChBC,IAAKpB,EAAKT,MAAM6B,IAChB0C,KAAM9D,EAAKT,MAAMuE,KACjB3D,UAAWH,EAAKT,MAAMyF,qCAlBdJ,cCOEQ,QACW,cAA7BC,OAAO9C,SAAS+C,UAEe,UAA7BD,OAAO9C,SAAS+C,UAEhBD,OAAO9C,SAAS+C,SAASC,MACvB,2DCZNC,IAASP,OAAO1B,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnE,KAAK,SAAAoE,GACjCA,EAAaC","file":"static/js/main.3181aa1a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Map, GoogleApiWrapper, InfoWindow } from \"google-maps-react\";\n\nconst GoogleKey = \"AIzaSyCV3zAwq168vlzJtoIzFUA7Om3SXyPKUYA\";\nconst CLIENT_ID = \"1WUIYNKZCO5ABUOWXICQFFSY10JUWKFMRP3L5W2L3OOEFL3H\";\nconst CLIENT_SECRET = \"4EW4HKTMV3O4AWG1DOM4VR4ZZDVRLW0XVGPPVI42NVYC1COU\";\nconst FS_V = 20180323;\n\nclass MapDisplay extends Component {\n  state = {\n    map: null,\n    markers: [],\n    markerProps: [],\n    activeMarker: null,\n    activeMarkerProps: null,\n    showingInfoWindow: false\n  };\n\n  mapReady = (props, map) => {\n    // Sets map state and preps for marker location\n    this.setState({ map });\n    this.updateMarkers(this.props.locations);\n  };\n\n  getBusinessInfo = (props, data) => {\n    // looks and compares Foursquare data agains our dataset\n    return data.response.venues.filter(\n      item => item.name.includes(props.name) || props.name.includes(item.name)\n    );\n  };\n\n  onMarkerClick = (props, marker, e) => {\n    this.onMarkerClose();\n\n    //Foursquare API Fetch Call\n    let url = `https://api.foursquare.com/v2/venues/search?client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}&v=${FS_V}&radius=100&ll=${\n      props.position.lat\n    },${props.position.lng}`;\n    let headers = new Headers();\n    let request = new Request(url, {\n      method: \"GET\",\n      headers\n    });\n\n    // Create props for active marker\n    let activeMarkerProps;\n    fetch(request)\n      .then(response => response.json())\n      .then(result => {\n        // get business reference from Foursquare\n        let restaurant = this.getBusinessInfo(props, result);\n        activeMarkerProps = {\n          ...props,\n          foursquare: restaurant[0]\n        };\n\n        // Gets images from foursquare, or returns what is available\n        if (activeMarkerProps.foursquare) {\n          let url = `https://api.foursquare.com/v2/venues/${\n            restaurant[0].id\n          }/photos?client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}&v=${FS_V}`;\n\n          fetch(url)\n            .then(response => response.json())\n            .then(result => {\n              activeMarkerProps = {\n                ...activeMarkerProps,\n                images: result.response.photo\n              };\n              if (this.state.activeMarker) {\n                this.setState({\n                  showingInfoWindow: true,\n                  activeMarker: marker,\n                  activeMarkerProps\n                });\n              }\n            });\n        } else {\n          this.setState({\n            showingInfoWindow: true,\n            activeMarker: marker,\n            activeMarkerProps\n          });\n        }\n      });\n\n    // check if we have foursquare data for selected restaurant\n\n    this.setState({\n      activeMarkerProps: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n  };\n\n  onMarkerClose = () => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null,\n        activeMarkerProps: null\n      });\n    }\n  };\n\n  updateMarkers = locations => {\n    if (!locations) {\n      return;\n    }\n\n    this.state.markers.forEach(marker => marker.setMap(null)); //clears map of any already placed markers\n\n    // Generate parrallel refrences to markers and their properties, as well as add markers to the map\n    let markerProps = [];\n    let markers = locations.map((location, index) => {\n      let tempProps = {\n        key: index,\n        index,\n        name: location.name,\n        position: location.pos,\n        url: location.url\n      };\n\n      markerProps.push(tempProps);\n\n      let animation = this.props.google.maps.Animation.DROP;\n      let marker = new this.props.google.maps.Marker({\n        position: location.pos,\n        map: this.state.map,\n        animation\n      });\n      marker.addListener(\"click\", () => {\n        this.onMarkerClick(tempProps, marker, null);\n      });\n\n      return marker;\n    });\n\n    this.setState({ markers, markerProps });\n  };\n\n  render() {\n    const mapStyles = [\"width: 100%\", \"height: 100%\"];\n    const center = {\n      lat: this.props.lat,\n      lng: this.props.lng\n    };\n\n    let actProps = this.state.activeMarkerProps; // active props on the marker\n\n    return (\n      <Map\n        role=\"application\"\n        aria-label=\"map\"\n        onReady={this.mapReady}\n        google={this.props.google}\n        zoom={this.props.zoom}\n        styles={mapStyles}\n        initialCenter={center}\n        onClick={this.onMarkerClose}\n      >\n        <InfoWindow\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}\n          onClose={this.onMarkerClose}\n        >\n          <div>\n            <h4>{actProps && actProps.name}</h4>\n            {actProps && actProps.url ? (\n              <a href={actProps.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                See Site\n              </a>\n            ) : (\n              \"\"\n            )}\n            {actProps && actProps.images ? (\n              <div>\n                <img\n                  alt={actProps.name + \" food picture\"}\n                  src={\n                    actProps.images.items[0].prefix +\n                    \"100x100\" +\n                    actProps.images.items[0].suffix\n                  }\n                />\n                <p>Image from Foursquare</p>\n              </div>\n            ) : (\n              \"\"\n            )}\n          </div>\n        </InfoWindow>\n      </Map>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: GoogleKey\n})(MapDisplay);\n","import React, { Component } from \"react\";\nimport MapDisplay from \"./components/MapDisplay\";\nimport locations from \"./data/locations\"; // data for locations on the map\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    lat: 40.8488511,\n    lng: -73.93837019999999,\n    zoom: 15,\n    all: locations\n  };\n\n  render = () => {\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          <h1>Favorite Washington Heights Restaurants</h1>\n        </div>\n        <MapDisplay\n          lat={this.state.lat}\n          lng={this.state.lng}\n          zoom={this.state.zoom}\n          locations={this.state.all}\n        />\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}