{"version":3,"sources":["components/NoMapDisplay.js","components/MapDisplay.js","components/ListDrawer.js","App.js","serviceWorker.js","index.js"],"names":["NoMapDisplay","state","show","timeout","componentDidMount","window","setTimeout","_this","showMessage","setState","componentWillUnmount","clearTimeout","render","react_default","a","createElement","Component","CLIENT_ID","CLIENT_SECRET","FS_V","MapDisplay","map","markers","markerProps","activeMarker","activeMarkerProps","showingInfoWindow","componentWillReceiveProps","props","length","locations","onMarkerClose","updateMarkers","selectedIndex","onMarkerClick","mapReady","marker","e","url","concat","position","lat","lng","headers","Headers","request","Request","method","fetch","then","response","json","result","restaurant","getBusinessInfo","Object","objectSpread","foursquare","id","images","photos","data","venues","filter","item","name","includes","forEach","setMap","location","index","tempProps","key","pos","push","animation","google","maps","Animation","DROP","Marker","addListener","center","this","actProps","dist","role","aria-label","onReady","zoom","styles","initialCenter","onClick","visible","onClose","href","target","rel","alt","src","items","prefix","suffix","GoogleApiWrapper","apiKey","LoadingContainer","ListDrawer","open","search","list","width","padding","noBullets","listStyleType","fullList","listItem","marginBottom","listLink","background","border","color","filterEntry","margin","updateSearch","newSearch","filterLocations","Drawer_default","toggleDrawer","style","type","placeholder","onChange","value","clickListItem","App","all","filtered","menuButton","marginLeft","marginRight","left","top","hide","display","header","marginTop","toLowerCase","className","components_MapDisplay","components_ListDrawer","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","src_App_0","document","getElementById","URL","process","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.124e0109.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass NoMapDisplay extends Component {\n  state = {\n    show: false,\n    timeout: null\n  };\n\n  componentDidMount = () => {\n    let timeout = window.setTimeout(this.showMessage, 1000);\n    this.setState({ timeout });\n  };\n\n  componentWillUnmount = () => {\n    window.clearTimeout(this.state.timeout);\n  };\n\n  showMessage = () => {\n    this.setState({ show: true });\n  };\n\n  render = () => {\n    return (\n      <div>\n        {this.state.show ? (\n          <div>\n            <h1>Error Loading Map</h1>\n            <p>Could not load map due to network error, please try again</p>\n          </div>\n        ) : (\n          <div>\n            <h1>Loading...</h1>\n          </div>\n        )}\n      </div>\n    );\n  };\n}\n\nexport default NoMapDisplay;\n","import React, { Component } from \"react\";\nimport NoMapDisplay from \"./NoMapDisplay\";\nimport { Map, GoogleApiWrapper, InfoWindow } from \"google-maps-react\";\n\nconst GOOGLE_KEY = \"AIzaSyCV3zAwq168vlzJtoIzFUA7Om3SXyPKUYA\";\nconst CLIENT_ID = \"1WUIYNKZCO5ABUOWXICQFFSY10JUWKFMRP3L5W2L3OOEFL3H\";\nconst CLIENT_SECRET = \"4EW4HKTMV3O4AWG1DOM4VR4ZZDVRLW0XVGPPVI42NVYC1COU\";\nconst FS_V = 20180323;\n\nclass MapDisplay extends Component {\n  state = {\n    map: null,\n    markers: [],\n    markerProps: [],\n    activeMarker: null,\n    activeMarkerProps: null,\n    showingInfoWindow: false\n  };\n\n  componentWillReceiveProps = props => {\n    // Change in the number of locations, so update the markers\n    if (this.state.markers.length !== props.locations.length) {\n      this.onMarkerClose();\n      this.updateMarkers(props.locations);\n      this.setState({ activeMarker: null });\n\n      return;\n    }\n\n    // The selected item is not the same as the active marker, so close the info window\n    if (\n      !props.selectedIndex ||\n      (this.state.activeMarker &&\n        this.state.markers[props.selectedIndex] !== this.state.activeMarker)\n    ) {\n      this.onMarkerClose();\n    }\n\n    // Make sure there's a selected index\n    if (props.selectedIndex === null) {\n      return;\n    }\n\n    // Treat the marker as clicked\n    this.onMarkerClick(\n      this.state.markerProps[props.selectedIndex],\n      this.state.markers[props.selectedIndex]\n    );\n  };\n\n  mapReady = (props, map) => {\n    // Sets map state and preps for marker location\n    this.setState({ map });\n    this.updateMarkers(this.props.locations);\n  };\n\n  onMarkerClick = (props, marker, e) => {\n    this.onMarkerClose();\n\n    //Foursquare API Fetch Call\n    let url = `https://api.foursquare.com/v2/venues/search?client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}&v=${FS_V}&radius=100&ll=${\n      props.position.lat\n    },${props.position.lng}`;\n    let headers = new Headers();\n    let request = new Request(url, {\n      method: \"GET\",\n      headers\n    });\n\n    // Create props for active marker\n    let activeMarkerProps;\n    fetch(request)\n      .then(response => response.json())\n      .then(result => {\n        // get business reference from Foursquare\n        let restaurant = this.getBusinessInfo(props, result);\n        activeMarkerProps = {\n          ...props,\n          foursquare: restaurant[0]\n        };\n\n        // Gets images from foursquare, or returns what is available\n        if (activeMarkerProps.foursquare) {\n          let url = `https://api.foursquare.com/v2/venues/${\n            restaurant[0].id\n          }/photos?client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}&v=${FS_V}`;\n\n          fetch(url)\n            .then(response => response.json())\n            .then(result => {\n              activeMarkerProps = {\n                ...activeMarkerProps,\n                images: result.response.photos\n              };\n              if (this.state.activeMarker) {\n                this.setState({\n                  showingInfoWindow: true,\n                  activeMarker: marker,\n                  activeMarkerProps\n                });\n              }\n            });\n        } else {\n          this.setState({\n            showingInfoWindow: true,\n            activeMarker: marker,\n            activeMarkerProps\n          });\n        }\n      });\n\n    // check if we have foursquare data for selected restaurant\n\n    this.setState({\n      activeMarkerProps: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n  };\n\n  getBusinessInfo = (props, data) => {\n    // looks and compares Foursquare data agains our dataset\n    return data.response.venues.filter(\n      item => item.name.includes(props.name) || props.name.includes(item.name)\n    );\n  };\n\n  onMarkerClose = () => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null,\n        activeMarkerProps: null\n      });\n    }\n  };\n\n  updateMarkers = locations => {\n    if (!locations) {\n      return;\n    }\n\n    this.state.markers.forEach(marker => marker.setMap(null)); //clears map of any already placed markers\n\n    // Generate parrallel refrences to markers and their properties, as well as add markers to the map\n    let markerProps = [];\n    let markers = locations.map((location, index) => {\n      let tempProps = {\n        key: index,\n        index,\n        name: location.name,\n        position: location.pos,\n        url: location.url\n      };\n\n      markerProps.push(tempProps);\n\n      let animation = this.props.google.maps.Animation.DROP;\n      let marker = new this.props.google.maps.Marker({\n        position: location.pos,\n        map: this.state.map,\n        animation\n      });\n      marker.addListener(\"click\", () => {\n        this.onMarkerClick(tempProps, marker, null);\n      });\n\n      return marker;\n    });\n\n    this.setState({ markers, markerProps });\n  };\n\n  render() {\n    const mapStyles = [\"width: 100%\", \"height: 100%\"];\n    const center = {\n      lat: this.props.lat,\n      lng: this.props.lng\n    };\n\n    let actProps = this.state.activeMarkerProps; // active props on the marker\n\n    return (\n      <Map\n        role=\"application\"\n        aria-label=\"map\"\n        onReady={this.mapReady}\n        google={this.props.google}\n        zoom={this.props.zoom}\n        styles={mapStyles}\n        initialCenter={center}\n        onClick={this.onMarkerClose}\n      >\n        <InfoWindow\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}\n          onClose={this.onMarkerClose}\n        >\n          <div>\n            <h4>{actProps && actProps.name}</h4>\n            {actProps && actProps.url ? (\n              <a href={actProps.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                See Site\n              </a>\n            ) : (\n              \"\"\n            )}\n            {actProps && actProps.images ? (\n              <div>\n                <img\n                  alt={actProps.name + \" food picture\"}\n                  src={\n                    actProps.images.items[0].prefix +\n                    \"100x100\" +\n                    actProps.images.items[0].suffix\n                  }\n                />\n                <p>Image from Foursquare</p>\n              </div>\n            ) : (\n              \"\"\n            )}\n          </div>\n        </InfoWindow>\n      </Map>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: GOOGLE_KEY,\n  LoadingContainer: NoMapDisplay\n})(MapDisplay);\n","import React, { Component } from \"react\";\nimport Drawer from \"@material-ui/core/Drawer\";\n\nclass ListDrawer extends Component {\n  state = {\n    open: false,\n    search: \"\"\n  };\n\n  styles = {\n    list: {\n      width: \"250px\",\n      padding: \"0px 15px 0px\"\n    },\n    noBullets: {\n      listStyleType: \"none\",\n      padding: 0\n    },\n    fullList: {\n      width: \"auto\"\n    },\n    listItem: {\n      marginBottom: \"15px\"\n    },\n    listLink: {\n      background: \"transparent\",\n      border: \"none\",\n      color: \"black\"\n    },\n    filterEntry: {\n      border: \"1px gray solid\",\n      padding: \"3px\",\n      margin: \"30px 0px 10px\",\n      width: \"100%\"\n    }\n  };\n\n  updateSearch = newSearch => {\n    //update search\n    this.setState({\n      search: newSearch\n    });\n    this.props.filterLocations(newSearch);\n  };\n\n  render = () => {\n    return (\n      <div>\n        <Drawer open={this.props.open} onClose={this.props.toggleDrawer}>\n          <div style={this.styles.list}>\n            <input\n              style={this.styles.filterEntry}\n              type=\"text\"\n              placeholder=\"Filter List\"\n              name=\"filter\"\n              onChange={e => {\n                this.updateSearch(e.target.value);\n              }}\n              value={this.state.search}\n            />\n            <ul style={this.styles.noBullets}>\n              {this.props.locations &&\n                this.props.locations.map((location, index) => {\n                  return (\n                    <li style={this.styles.listItem} key={index}>\n                      <button\n                        style={this.styles.listLink}\n                        key={index}\n                        onClick={e => this.props.clickListItem(index)}\n                      >\n                        {location.name}\n                      </button>\n                    </li>\n                  );\n                })}\n            </ul>\n          </div>\n        </Drawer>\n      </div>\n    );\n  };\n}\n\nexport default ListDrawer;\n","import React, { Component } from \"react\";\nimport MapDisplay from \"./components/MapDisplay\";\nimport ListDrawer from \"./components/ListDrawer\";\nimport locations from \"./data/locations\"; // data for locations on the map\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    lat: 40.8488511,\n    lng: -73.93837019999999,\n    zoom: 15,\n    all: locations,\n    filtered: null,\n    open: false,\n    selectedIndex: null\n  };\n\n  styles = {\n    menuButton: {\n      marginLeft: 10,\n      marginRight: 20,\n      position: \"absolute\",\n      left: 10,\n      top: 20,\n      background: \"white\",\n      padding: 10\n    },\n    hide: {\n      display: \"none\"\n    },\n    header: {\n      marginTop: \"0px\"\n    }\n  };\n\n  componentDidMount = () => {\n    this.setState({\n      ...this.state,\n      filtered: this.filterLocations(this.state.all, \"\")\n    });\n  };\n\n  toggleDrawer = () => {\n    // toggle the drawer list open/closed\n    this.setState({\n      open: !this.state.open\n    });\n  };\n\n  updateSearch = search => {\n    //update search\n    this.setState({\n      ...this.state,\n      selectedIndex: null,\n      filtered: this.filterLocations(this.state.all, search)\n    });\n  };\n\n  filterLocations = (locations, search) => {\n    return locations.filter(location => {\n      return location.name.toLowerCase().includes(search.toLowerCase());\n    });\n  };\n\n  clickListItem = index => {\n    this.setState({\n      selectedIndex: index,\n      open: !this.state.open\n    });\n  };\n\n  render = () => {\n    return (\n      <div className=\"App\">\n        <div style={this.styles.header}>\n          <button onClick={this.toggleDrawer} style={this.styles.menuButton}>\n            <i className=\"fa fa-bars\" />\n          </button>\n          <h1>Favorite Washington Heights Restaurants</h1>\n        </div>\n        <MapDisplay\n          lat={this.state.lat}\n          lng={this.state.lng}\n          zoom={this.state.zoom}\n          locations={this.state.filtered}\n          selectedIndex={this.state.selectedIndex}\n        />\n        <ListDrawer\n          locations={this.state.filtered}\n          open={this.state.open}\n          toggleDrawer={this.toggleDrawer}\n          filterLocations={this.updateSearch}\n          clickListItem={this.clickListItem}\n        />\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}